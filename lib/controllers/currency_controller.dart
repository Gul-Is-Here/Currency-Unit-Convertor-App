// app/modules/currency/currency_controller.dart
import 'package:get/get.dart';
import 'package:intl/intl.dart';
import 'package:currency_convertor_app/database/database_helper.dart';

class CurrencyController extends GetxController {
  final DatabaseHelper _database = Get.find();

  // Conversion values
  final fromValue = 0.0.obs;
  final toValue = 0.0.obs;
  
  // Currency selections
  final fromCurrency = 'USD'.obs;
  final toCurrency = 'EUR'.obs;
  
  // Rate management
  final lastUpdated = Rx<DateTime?>(null);
  final rates = <String, double>{}.obs;

  // Available currencies
  final List<String> currencies = [
    'USD', 'EUR', 'GBP', 'JPY', 
    'AUD', 'CAD', 'CHF', 'CNY', 'INR'
  ];

  // Default exchange rates (USD base)
  final Map<String, double> defaultRates = {
    'EUR': 0.85,
    'GBP': 0.73,
    'JPY': 110.15,
    'AUD': 1.30,
    'CAD': 1.25,
    'CHF': 0.92,
    'CNY': 6.45,
    'INR': 74.50,
  };

  @override
  void onReady() async {
    super.onReady();
    await _initializeRates();
    loadLastUpdated();
  }

  Future<void> _initializeRates() async {
    rates.addAll(defaultRates);
    
    // Load saved rates from database
    for (final currency in currencies.where((c) => c != 'USD')) {
      final savedRate = await _database.getCurrencyRate(currency);
      if (savedRate != null) {
        rates[currency] = savedRate;
      } else {
        await _database.updateCurrencyRate(
          currency, 
          defaultRates[currency] ?? 1.0,
        );
      }
    }
  }

  void convert() {
    if (fromCurrency.value == 'USD') {
      toValue.value = fromValue.value * _getRate(toCurrency.value);
    } else if (toCurrency.value == 'USD') {
      toValue.value = fromValue.value / _getRate(fromCurrency.value);
    } else {
      final fromRate = _getRate(fromCurrency.value);
      final toRate = _getRate(toCurrency.value);
      toValue.value = fromValue.value * (toRate / fromRate);
    }

    _saveConversion();
  }

  double _getRate(String currency) => rates[currency] ?? 1.0;

  Future<void> _saveConversion() async {
    await _database.insertConversion({
      'category': 'currency',
      'fromValue': fromValue.value,
      'fromUnit': fromCurrency.value,
      'toValue': toValue.value,
      'toUnit': toCurrency.value,
      'timestamp': DateTime.now().millisecondsSinceEpoch,
    });
  }

  void swapCurrencies() {
    final temp = fromCurrency.value;
    fromCurrency.value = toCurrency.value;
    toCurrency.value = temp;
    convert();
  }

  Future<void> loadLastUpdated() async {
    final result = await _database.query(
      'currency_rates',
      orderBy: 'lastUpdated DESC',
      limit: 1,
    );
    
    if (result.isNotEmpty) {
      lastUpdated.value = DateTime.fromMillisecondsSinceEpoch(
        result.first['lastUpdated'] as int,
      );
    }
  }

  Future<void> updateRate(String currency, double rate) async {
    rates[currency] = rate;
    await _database.updateCurrencyRate(currency, rate);
    lastUpdated.value = DateTime.now();
    convert();
  }

  String get formattedLastUpdated {
    return lastUpdated.value == null 
        ? 'Never updated'
        : DateFormat('MMM d, y - h:mm a').format(lastUpdated.value!);
  }

  Future<void> shareConversion() async {
    final conversion = '''
ðŸ’± Currency Conversion:
${fromValue.value.toStringAsFixed(2)} ${fromCurrency.value} = ${toValue.value.toStringAsFixed(2)} ${toCurrency.value}
Rate: 1 ${fromCurrency.value} = ${(toValue.value/fromValue.value).toStringAsFixed(6)} ${toCurrency.value}

Generated by Unit Converter Pro''';

    // Uncomment after adding share_plus to pubspec.yaml
    // await Share.share(conversion);
  }
}